services:
  nginx-proxy:
    build: nginx
    image: serpentariya/booking_nginx:${TAG}
    restart: always
    volumes:
      - ./nginx/default.conf:/tmp/default.conf
      - /etc/letsencrypt:/etc/letsencrypt
    environment: 
      - FLASK_SERVER_ADDR=flask-app:8000
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - flask-app
    healthcheck:
      test: ["CMD-SHELL", "curl --silent --fail localhost:80/health-check || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 3
    command: /app/start.sh
    networks:
      - frontend
      - backend

  flask-app:
    build: flask
    image: serpentariya/booking_app:${TAG}
    restart: always
    ports: 
      - '8000:8000'
    healthcheck:
      test: ["CMD-SHELL", "curl --silent --fail localhost:8000/flask-health-check || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 3
    command: gunicorn -w 3 -t 60 -b 0.0.0.0:8000 app:app
    networks:
      - backend

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    user: "65534:65534"  # Изменено с nobody:nobody на числовой ID
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus/rules:/etc/prometheus/rules
      - ./prometheus/data:/prometheus/data
      - ./prometheus/reports:/prometheus/reports
      - ./prometheus/generate_report.sh:/prometheus/generate_report.sh
    entrypoint: >
      sh -c "chmod +x /prometheus/generate_report.sh &&
             (crontab -l 2>/dev/null; echo '0 0 * * * /prometheus/generate_report.sh') | crontab - &&
             /prometheus/generate_report.sh &&
             /bin/prometheus --config.file=/etc/prometheus/prometheus.yml"
    ports:
      - "9090:9090"
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus/data"
      - "--storage.tsdb.retention.time=1d"
      - "--storage.tsdb.retention.size=100MB"
    networks:
      - backend

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    volumes:
      - '/:/host:ro,rslave'
    command:
      - '--path.rootfs=/host'
    networks:
      - backend

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge
    internal: true
