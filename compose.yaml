services:
  nginx-proxy:
    build: nginx
    image: ${DOCKER_HUB_NICKNAME}/booking_nginx:${TAG}
    restart: always
    volumes:
      - ./nginx/default.conf:/tmp/default.conf
      - /etc/letsencrypt:/etc/letsencrypt
      - nginx_logs:/var/log/nginx 
    environment: 
      - FLASK_SERVER_ADDR=flask-app:8000
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - flask-app
    healthcheck:
      test: ["CMD-SHELL", "curl --silent --fail localhost:80/health-check || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 3
    command: /app/start.sh
    networks:
      - frontend
      - backend

  flask-app:
    build: flask
    image: ${DOCKER_HUB_NICKNAME}/booking_app:${TAG}
    restart: always
    ports: 
      - '8000:8000'
    healthcheck:
      test: ["CMD-SHELL", "curl --silent --fail localhost:8000/flask-health-check || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 3
    command: gunicorn -w 3 -t 60 -b 0.0.0.0:8000 app:app
    networks:
      - backend
   
  crowdsec:
    image: crowdsecurity/crowdsec:latest
    container_name: crowdsec
    depends_on:
      - nginx-proxy
    volumes:
      - ./crowdsec/config:/etc/crowdsec
      - ./crowdsec/data:/var/lib/crowdsec/data
      - /var/log/auth.log:/var/log/auth.log:ro
      - crowdsec_db:/var/lib/crowdsec/data/db.sqlite # Для хранения базы данных
      - crowdsec_config:/etc/crowdsec/local_api_credentials.yaml # Для хранения ключей
      - nginx_logs:/var/log/nginx:ro 
    networks:
      - backend
    restart: always
    expose:
      - "8080"  # Только для внутренней сети
    command: -listen-address 127.0.0.1:9090  # Слушаем только локальные подключения

volumes:
  nginx_logs:
  crowdsec_db:
  crowdsec_config:  
   
networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge
    internal: true
