# Cloudflare IP ranges
set_real_ip_from 103.21.244.0/22;
set_real_ip_from 103.22.200.0/22;
set_real_ip_from 103.31.4.0/22;
set_real_ip_from 104.16.0.0/13;
set_real_ip_from 104.24.0.0/14;
set_real_ip_from 108.162.192.0/18;
set_real_ip_from 131.0.72.0/22;
set_real_ip_from 141.101.64.0/18;
set_real_ip_from 162.158.0.0/15;
set_real_ip_from 172.64.0.0/13;
set_real_ip_from 173.245.48.0/20;
set_real_ip_from 188.114.96.0/20;
set_real_ip_from 190.93.240.0/20;
set_real_ip_from 197.234.240.0/22;
set_real_ip_from 198.41.128.0/17;

real_ip_header CF-Connecting-IP;
# Cloudflare END of CONFIG 

proxy_cache_path /tmp/cache levels=1:2 keys_zone=cache:10m max_size=500m inactive=60m use_temp_path=off;

# Блок для блокировки прямого доступа по IP
server {
    listen 80 default_server;
    listen 443 ssl default_server;
    server_name _;

    # Allow health checks
    location /health-check {
        add_header Content-Type text/plain;
        return 200 "success";
    }
    
    # Используем сертификат для default server
    ssl_certificate /etc/letsencrypt/live/www.bbooking.pp.ua/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/www.bbooking.pp.ua/privkey.pem;
    
    # Возвращаем 444 код - закрываем соединение
    location / {
        return 444;
    }
}

server {
  listen 80;
  server_name bbooking.pp.ua www.bbooking.pp.ua;
  
  location /health-check {
        add_header Content-Type text/plain;
        return 200 "success";
    }
  # Другие запросы проходят перенаправление на HTTPS
  location / {
  # Перенаправление HTTP на HTTPS
  return 301 https://$server_name$request_uri;
  }
}

server {
  listen 443 ssl;
  server_name bbooking.pp.ua www.bbooking.pp.ua;

  ssl_certificate /etc/letsencrypt/live/www.bbooking.pp.ua/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/www.bbooking.pp.ua/privkey.pem;

  ssl_protocols TLSv1.2 TLSv1.3;
  ssl_prefer_server_ciphers on;

  # Add security headers, after SSL config but before locations
  add_header X-Frame-Options "SAMEORIGIN" always;
  add_header X-Content-Type-Options "nosniff" always;
  add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
  add_header Content-Security-Policy "default-src 'self'; img-src 'self' data: https:; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; font-src 'self'; frame-ancestors 'none'; base-uri 'self'; form-action 'self'" always;
  add_header Permissions-Policy "geolocation=(), midi=(), sync-xhr=(), microphone=(), camera=(), magnetometer=(), gyroscope=(), fullscreen=(self), payment=()" always;

  # Main location block
  location / {
    proxy_pass http://$FLASK_SERVER_ADDR;
    add_header Cache-Control "no-store, no-cache, must-revalidate, proxy-revalidate" always;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
}

  # Static content
  location /static/ {
    proxy_pass http://$FLASK_SERVER_ADDR;
    expires 1h;
    add_header Cache-Control "public, max-age=3600, must-revalidate" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
}

  location /cache-me {
    proxy_pass http://$FLASK_SERVER_ADDR;
    proxy_cache cache;
    proxy_cache_lock on;
    proxy_cache_valid 200 30s;
    proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
    proxy_cache_revalidate on;
    proxy_cache_background_update on;
    expires 20s;
  }

  location /health-check {
    add_header Content-Type text/plain;
    return 200 "success";
  }
}
