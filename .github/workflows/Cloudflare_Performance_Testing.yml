name: Cloudflare Performance Testing

on:
  workflow_dispatch:
    inputs:
      reason:
        description: 'Cloudflare Performance Testing with required bypassing steps'
        required: false
        default: 'Should be manually triggered'

jobs:
  monitor:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up environment variables
        env:
          CLOUDFLARE_API_KEY: ${{ secrets.CLOUDFLARE_API_KEY }}
          CLOUDFLARE_EMAIL: ${{ secrets.CLOUDFLARE_EMAIL }}
          CLOUDFLARE_ZONE_ID: ${{ secrets.CLOUDFLARE_ZONE_ID }}
        run: |
          echo "CLOUDFLARE_API_KEY=${{ secrets.CLOUDFLARE_API_KEY }}" >> $GITHUB_ENV
          echo "CLOUDFLARE_EMAIL=${{ secrets.CLOUDFLARE_EMAIL }}" >> $GITHUB_ENV
          echo "CLOUDFLARE_ZONE_ID=${{ secrets.CLOUDFLARE_ZONE_ID }}" >> $GITHUB_ENV
    
      - name: Get current IP address for GitHub Actions
        id: get_ip
        run: |
          IP=$(curl -s https://api.ipify.org)
          echo "Current IP: $IP"
          echo "IP=$IP" >> $GITHUB_ENV

      - name: Add IP for GitHub Actions to Cloudflare whitelist and Check Website Health
        env:
          CLOUDFLARE_ZONE_ID: ${{ secrets.CLOUDFLARE_ZONE_ID }}
          CLOUDFLARE_API_KEY: ${{ secrets.CLOUDFLARE_API_KEY }}
        run: |
          # Add IP to whitelist (existing code)
          curl -X POST "https://api.cloudflare.com/client/v4/zones/$CLOUDFLARE_ZONE_ID/firewall/access_rules/rules" \
            -H "Authorization: Bearer $CLOUDFLARE_API_KEY" \
            -H "Content-Type: application/json" \
            --data '{
              "mode":"whitelist",
              "configuration":{"target":"ip","value":"'"$IP"'"},
              "notes":"Allow GitHub Actions runner"
            }'

      - name: Check Bot Fight Mode Status
        run: |
          RESPONSE=$(curl -s -X GET "https://api.cloudflare.com/client/v4/zones/$CLOUDFLARE_ZONE_ID/bot_management" \
            -H "X-Auth-Email: $CLOUDFLARE_EMAIL" \
            -H "X-Auth-Key: $CLOUDFLARE_API_KEY" \
            -H "Content-Type: application/json")
      
          FIGHT_MODE_STATUS=$(echo $RESPONSE | jq -r '.result.fight_mode')
      
          if [ "$FIGHT_MODE_STATUS" = "true" ]; then
            echo "Bot Fight Mode is currently enabled."
          else
            echo "Bot Fight Mode is currently disabled."
          fi


      - name: Run Cloudflare Speed Test
        env:
          CLOUDFLARE_ZONE_ID: ${{ secrets.CLOUDFLARE_ZONE_ID }}
          CLOUDFLARE_API_KEY: ${{ secrets.CLOUDFLARE_API_KEY }}
        run: |
          # Запускаем тест производительности
          TEST_RESPONSE=$(curl -X POST "https://api.cloudflare.com/client/v4/zones/$CLOUDFLARE_ZONE_ID/speed_tests" \
            -H "Authorization: Bearer $CLOUDFLARE_API_KEY" \
            -H "Content-Type: application/json" \
            --data '{
              "target": "https://bbooking.pp.ua/",
              "location": "us-central1"
            }')
          
          TEST_ID=$(echo $TEST_RESPONSE | jq -r '.result.id')
          echo "TEST_ID=$TEST_ID" >> $GITHUB_ENV

      - name: Restore Bot Fight Mode
        if: always()
        env:
          CLOUDFLARE_ZONE_ID: ${{ secrets.CLOUDFLARE_ZONE_ID }}
          CLOUDFLARE_API_KEY: ${{ secrets.CLOUDFLARE_API_KEY }}
        run: |
          # Восстанавливаем исходное состояние Bot Fight Mode
          curl -s -X PATCH "https://api.cloudflare.com/client/v4/zones/$CLOUDFLARE_ZONE_ID/settings/bots" \
            -H "Authorization: Bearer $CLOUDFLARE_API_KEY" \
            -H "Content-Type: application/json" \
            --data '{"value":"'"${{ env.CURRENT_BOT_FIGHT_MODE }}"'"}'
