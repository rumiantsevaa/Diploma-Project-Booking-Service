name: Deploy Docker Compose to AWS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    # 1. Клонируем репозиторий
    - name: Checkout code
      uses: actions/checkout@v3

    # 2. Устанавливаем SSH-доступ
    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ secrets.AWS_SSH_KEY }}

    # 3. Логинимся в Docker Hub
    - name: Log in to Docker Hub
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    # 4. Генерируем новый тег версии
    - name: Generate new Docker tag
      run: |
        CURRENT_VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "v1.0.0")
        echo "Current version: $CURRENT_VERSION"
        # Извлекаем числа, убирая 'v' в начале
        VERSION_NUMBER=${CURRENT_VERSION#v}
        IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION_NUMBER"
        PATCH=$(echo "$PATCH + 0.1" | bc)
        NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
        echo "New version will be: $NEW_VERSION"

    # 5. Копируем репозиторий на сервер AWS
    - name: Clone or Update Repository on AWS
      run: |
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.SERVER_USER }}@${{ secrets.AWS_SERVER_IP }} << EOF
        if [ -d "/home/${{ secrets.SERVER_USER }}/project/.git" ]; then
          cd /home/${{ secrets.SERVER_USER }}/project
          git reset --hard
          git clean -fd
          git pull
        else
          rm -rf /home/${{ secrets.SERVER_USER }}/project
          git clone https://github.com/rumiantsevaa/Diploma-Project-Booking-Service /home/${{ secrets.SERVER_USER }}/project
        fi
        EOF

    # 6. Собираем Docker-образы на AWS с новым тегом
    - name: Build Docker Images on AWS
      run: |
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.SERVER_USER }}@${{ secrets.AWS_SERVER_IP }} << EOF
        cd ~/project
        echo "TAG=${{ env.NEW_VERSION }}" > .env  # Записываем тег в .env
        docker compose build
        EOF

    # 7. Публикуем образы на Docker Hub с новым тегом
    - name: Push Docker Images to Docker Hub
      run: |
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.SERVER_USER }}@${{ secrets.AWS_SERVER_IP }} << EOF
        docker login -u "${{ secrets.DOCKER_USERNAME }}" -p "${{ secrets.DOCKER_PASSWORD }}" docker.io
        cd ~/project
        docker compose push
        EOF

    # 8. Останавливаем и удаляем старые контейнеры на AWS
    - name: Stop and remove old containers on AWS
      run: |
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.SERVER_USER }}@${{ secrets.AWS_SERVER_IP }} << EOF
        cd ~/project || true
        docker compose down || true
        docker system prune -f || true
        EOF

    # 9. Загружаем образы с Docker Hub и запускаем контейнеры на AWS
    - name: Deploy Docker Compose from Docker Hub
      run: |
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.SERVER_USER }}@${{ secrets.AWS_SERVER_IP }} << EOF
        cd ~/project
        docker compose pull --ignore-pull-failures  # Игнорируем ошибки, если образов нет
        docker compose up -d --force-recreate       # Принудительно пересоздаем контейнеры
        EOF
