name: Deploy Docker Compose to AWS

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'version.txt'  # Игнорировать изменения в version.txt
      - 'project.log'  # Игнорировать изменения в project.log
      
jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        token: ${{ secrets.PAT }}
        fetch-depth: 0

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Generate new Docker tag
      run: |
        CURRENT_VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "v1.0.0")
        MAJOR=$(echo $CURRENT_VERSION | sed 's/v\([0-9]*\)\.\([0-9]*\)\.\([0-9]*\)/\1/')
        MINOR=$(echo $CURRENT_VERSION | sed 's/v\([0-9]*\)\.\([0-9]*\)\.\([0-9]*\)/\2/')
        PATCH=$(echo $CURRENT_VERSION | sed 's/v\([0-9]*\)\.\([0-9]*\)\.\([0-9]*\)/\3/')
        NEW_PATCH=$((PATCH + 1))
        NEW_VERSION="v${MAJOR}.${MINOR}.${NEW_PATCH}"
        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

    - name: Update version files
      run: |
        echo "${{ env.NEW_VERSION }}" > version.txt
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        git add version.txt
        git commit -m "Update version to ${{ env.NEW_VERSION }}" || echo "No changes to commit"
        git tag ${{ env.NEW_VERSION }}
        git push https://${{ secrets.PAT }}@github.com/rumiantsevaa/diploma-project-booking-service.git HEAD:main
        git push https://${{ secrets.PAT }}@github.com/rumiantsevaa/diploma-project-booking-service.git ${{ env.NEW_VERSION }}


    - name: Build and Push Flask Image
      uses: docker/build-push-action@v4
      with:
        context: ./flask
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/booking_app:${{ env.NEW_VERSION }}

    - name: Build and Push Nginx Image  
      uses: docker/build-push-action@v4
      with:
        context: ./nginx
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/booking_nginx:${{ env.NEW_VERSION }}

    - name: Copy configuration files
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.AWS_SERVER_IP }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.AWS_SSH_KEY }}
        source: "compose.yaml,nginx/default.conf"
        target: "~/project/"

    - name: Deploy to AWS
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.AWS_SERVER_IP }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.AWS_SSH_KEY }}
        script: |
          # Создаем минимальную структуру директорий
          mkdir -p ~/project/nginx
          
          # Создаем .env файл с версией
          echo "TAG=${{ env.NEW_VERSION }}" > ~/project/.env
          
          # Переходим в директорию проекта
          cd ~/project
          
          # Останавливаем контейнеры и чистим неиспользуемые образы
          docker compose down --remove-orphans
          docker system prune -f
          
          # Подтягиваем новые образы из Docker Hub
          docker pull ${{ secrets.DOCKER_USERNAME }}/booking_nginx:${{ env.NEW_VERSION }}
          docker pull ${{ secrets.DOCKER_USERNAME }}/booking_app:${{ env.NEW_VERSION }}
          
          # Запускаем новые контейнеры
          docker compose up -d --force-recreate
