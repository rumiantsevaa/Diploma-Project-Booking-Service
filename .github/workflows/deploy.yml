name: Deploy Docker Compose to AWS

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'version.txt'  # Игнорировать изменения в version.txt
      - 'project.log'  # Игнорировать изменения в project.log
      - 'netdata/dashboards/**'  # Игнорировать изменения в dashboards/
      - 'last_successful_version.txt'  # Игнорировать изменения в last_successful_version.txt
     
jobs:
  deploy:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ env.NEW_VERSION }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        token: ${{ secrets.PAT }}
        fetch-depth: 0

    - name: Load last successful version
      run: |
        echo "LAST_SUCCESSFUL_VERSION=$(cat last_successful_version.txt)" >> $GITHUB_ENV

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Generate new Docker tag
      env:
        VER_TYPE: 1  # Default value for patch version increment is 1 (PATCH) 
      run: |
        CURRENT_VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "v1.0.0")
        MAJOR=$(echo $CURRENT_VERSION | cut -d. -f1 | tr -d 'v')
        MINOR=$(echo $CURRENT_VERSION | cut -d. -f2)
        PATCH=$(echo $CURRENT_VERSION | cut -d. -f3)
        
        if [ "$VER_TYPE" = "1" ]; then
          # Patch version increment (1.0.1 -> 1.0.2)
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="v${MAJOR}.${MINOR}.${NEW_PATCH}"
        elif [ "$VER_TYPE" = "2" ]; then
          # Minor version increment (1.0.1 -> 1.1.0)
          NEW_MINOR=$((MINOR + 1))
          NEW_VERSION="v${MAJOR}.${NEW_MINOR}.0"
        elif [ "$VER_TYPE" = "3" ]; then
          # Major version increment (1.0.1 -> 2.0.0)
          NEW_MAJOR=$((MAJOR + 1))
          NEW_VERSION="v${NEW_MAJOR}.0.0"
        else
          # Default to patch increment if invalid VER_TYPE
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="v${MAJOR}.${MINOR}.${NEW_PATCH}"
        fi
        
        echo "NEW_VERSION=${NEW_VERSION}" >> $GITHUB_ENV
        echo "$NEW_VERSION" > version.txt

    - name: Check and delete existing Docker images if Rerun
      run: |
        # Функция для проверки и удаления образа
        check_and_delete_image() {
          local image=$1
          local tag=$2
          
          if docker manifest inspect ${{ secrets.DOCKER_USERNAME }}/${image}:${tag} >/dev/null 2>&1; then
            echo "ALERT! You seem to re-run this deploy. It means that previous version of this build ${image}:${tag} will deleted and recreated. You may redo it if your deploy fails."
            echo "Image ${image}:${tag} already exists. Deleting..."
            docker image rm ${{ secrets.DOCKER_USERNAME }}/${image}:${tag} || true
            echo "Image ${image}:${tag} deleted successfully"
          else
            echo "Image ${image}:${tag} does not exist yet"
          fi
        }
        
        # Проверяем и удаляем оба образа если они существуют
        check_and_delete_image "booking_app" "${{ env.NEW_VERSION }}"
        check_and_delete_image "booking_nginx" "${{ env.NEW_VERSION }}"
    
    - name: Update version.txt unless Rerun 
      run: |
          # Проверяем существование тега
          if git ls-remote --tags origin refs/tags/${{ env.NEW_VERSION }} | grep -q refs/tags/${{ env.NEW_VERSION }}; then
            echo "ALERT! This is a re-run. Skipping version update in version.txt"
          else
          # Если тега нет - обновляем версию как обычно
            echo "${{ env.NEW_VERSION }}" > version.txt
            git config --local user.email "github-actions[bot]@users.noreply.github.com"
            git config --local user.name "github-actions[bot]"
            git add version.txt
            git commit -m "Update version to ${{ env.NEW_VERSION }}" || echo "No changes to commit"
            git tag ${{ env.NEW_VERSION }}
            git push https://${{ secrets.PAT }}@github.com/rumiantsevaa/Diploma-Project-Booking-Service.git HEAD:main
            git push https://${{ secrets.PAT }}@github.com/rumiantsevaa/Diploma-Project-Booking-Service.git ${{ env.NEW_VERSION }}
          fi

    - name: Build and Push Flask Image
      uses: docker/build-push-action@v4
      with:
        context: ./flask
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/booking_app:${{ env.NEW_VERSION }}

    - name: Build and Push Nginx Image  
      uses: docker/build-push-action@v4
      with:
        context: ./nginx
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/booking_nginx:${{ env.NEW_VERSION }}

    - name: Copy configuration files
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.AWS_SERVER_IP }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.AWS_SSH_KEY }}
        source: "compose.yaml,nginx/default.conf"
        target: "~/project/"

    - name: Check and install Docker & Docker Compose
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.AWS_SERVER_IP }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.AWS_SSH_KEY }}
        script: |
          # Check if Docker is installed
          if ! command -v docker &> /dev/null; then
            echo "Docker not found. Installing Docker..."
            sudo apt-get update
            sudo apt-get install -y docker.io
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo usermod -aG docker $USER
          else
            echo "Docker is already installed"
          fi

          # Check if Docker Compose is installed
          if ! command -v docker-compose &> /dev/null; then
            echo "Docker Compose not found. Installing Docker Compose..."
            sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
          else
            echo "Docker Compose is already installed"
          fi

    - name: Deploy to AWS
      id: deploy_step
      continue-on-error: true  # Allow continuing even if deployment fails
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.AWS_SERVER_IP }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.AWS_SSH_KEY }}
        script: |
          # Создаем минимальную структуру директорий
          mkdir -p ~/project/nginx
          
          # Создаем .env файл с версией и передаем ее + DOCKER_HUB_NICKNAME
          echo "TAG=${{ env.NEW_VERSION }}" > ~/project/.env
          echo "DOCKER_HUB_NICKNAME=${{ secrets.DOCKER_HUB_NICKNAME }}" >> ~/project/.env
          
          # Переходим в директорию проекта
          cd ~/project
          
          # Останавливаем контейнеры и чистим неиспользуемые образы
          docker-compose down --remove-orphans
          docker system prune -f
          
          # Подтягиваем новые образы из Docker Hub
          docker pull ${{ secrets.DOCKER_USERNAME }}/booking_nginx:${{ env.NEW_VERSION }}
          docker pull ${{ secrets.DOCKER_USERNAME }}/booking_app:${{ env.NEW_VERSION }}
          
          # Запускаем новые контейнеры
          docker-compose up -d --force-recreate

          # Define rollback function
          rollback_deployment() {
            local error_message=$1
            echo "$error_message Rolling back to version ${{ env.LAST_SUCCESSFUL_VERSION }}"
            echo "TAG=${{ env.LAST_SUCCESSFUL_VERSION }}" > ~/project/.env
            # Затем добавляем DOCKER_HUB_NICKNAME
            echo "DOCKER_HUB_NICKNAME=${{ secrets.DOCKER_HUB_NICKNAME }}" >> ~/project/.env
            docker pull ${{ secrets.DOCKER_USERNAME }}/booking_nginx:${{ env.LAST_SUCCESSFUL_VERSION }}
            docker pull ${{ secrets.DOCKER_USERNAME }}/booking_app:${{ env.LAST_SUCCESSFUL_VERSION }}
            docker-compose up -d --force-recreate
            exit 1
          }

          # Check deployment status
          if [ $? -ne 0 ]; then
              rollback_deployment "Deployment failed!"
          fi

          # Добавить паузу для инициализации контейнеров
          echo "Waiting for containers to initialize..."
          sleep 15

          # Check if both containers are running and healthy
          NGINX_STATUS=$(docker ps --filter "name=project-nginx-proxy" --filter "ancestor=${{ secrets.DOCKER_USERNAME }}/booking_nginx:${{ env.NEW_VERSION }}" --format "{{.Status}}" | grep -c "Up.*healthy")
          APP_STATUS=$(docker ps --filter "name=project-flask-app" --filter "ancestor=${{ secrets.DOCKER_USERNAME }}/booking_app:${{ env.NEW_VERSION }}" --format "{{.Status}}" | grep -c "Up.*healthy")

          if [ $NGINX_STATUS -ne 1 ] || [ $APP_STATUS -ne 1 ]; then
            echo "Container health check failed! One or both containers are not healthy. Rolling back to version ${{ env.LAST_SUCCESSFUL_VERSION }}"
              rollback_deployment "Container health check failed! One or both containers are not healthy."
          fi
          
          echo "Deployment successful - both containers are running and healthy"

    - name: Update last successful version
      if: success() && steps.deploy_step.outcome == 'success'
      run: |
            echo "${{ env.NEW_VERSION }}" > last_successful_version.txt
            git config --local user.email "github-actions[bot]@users.noreply.github.com"
            git config --local user.name "github-actions[bot]"
            git add last_successful_version.txt
            git commit -m "Update last successful version to ${{ env.NEW_VERSION }}"
            git push
        
    - name: Exit workflow after rollback
      if: failure() && steps.deploy_step.outcome == 'failure'
      run: |
            echo "Deployment failed and rollback was performed. Stopping workflow."
            exit 0

    - name: SSL Certificate Management
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.AWS_SERVER_IP }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.AWS_SSH_KEY }}
        script: |
          # Проверяем наличие certbot
          if ! command -v certbot &> /dev/null; then
            sudo apt-get update
            sudo apt-get install -y certbot
          fi

          # Проверяем наличие crontab и устанавливаем при необходимости
          if ! command -v crontab &> /dev/null; then
            echo "Installing crontab..."
            sudo apt-get update
            sudo apt-get install -y cron
            sudo systemctl enable cron
            sudo systemctl start cron
          fi
          
          # Проверяем наличие задачи в crontab
          if ! sudo crontab -l 2>/dev/null | grep -q "certbot renew --quiet"; then
            echo "Adding certbot renewal task to crontab..."
            # Создаем новый crontab если он не существует или добавляем к существующему
            (sudo crontab -l 2>/dev/null || echo "") | grep -v "certbot renew --quiet" | { cat; echo "0 3 1 * * certbot renew --quiet"; } | sudo crontab -
            echo "Certbot renewal task added to crontab"
          else
            echo "Certbot renewal task already exists in crontab"
          fi
          
          # Получаем информацию о сертификатах
          CERT_INFO=$(sudo certbot certificates)
          
          # Проверяем наличие сертификата для обоих доменов
          if echo "$CERT_INFO" | grep -q "Domains: bbooking.pp.ua www.bbooking.pp.ua"; then
            echo "Certificate found for both domains. Attempting renewal if needed..."
            # Останавливаем контейнеры перед обновлением
            cd ~/project && docker-compose down
            
            # Пробуем обновить сертификаты
            sudo certbot renew
            
            # Запускаем контейнеры
            cd ~/project && docker-compose up -d
          else
            echo "No certificate found for both domains. Obtaining new certificate..."
            # Останавливаем контейнеры
            cd ~/project && docker-compose down
            
            # Получаем новый сертификат
            sudo certbot certonly --standalone \
              -d bbooking.pp.ua -d www.bbooking.pp.ua \
              --non-interactive --agree-tos \
              -m ${{ secrets.EMAIL_FOR_CERTBOT }} \
              --force-renewal
            
            # Запускаем контейнеры
            cd ~/project && docker-compose up -d
          fi
          
  security-checks-and-monitoring:
      needs: deploy  # Чтобы проверки производились исключительно по отработке deploy.yml
      runs-on: ubuntu-latest
      steps:
        - name: Checkout code
          uses: actions/checkout@v3
          
        - name: Get version
          id: get_version
          run: echo "VERSION=$(cat version.txt)" >> $GITHUB_ENV

          # Добавление Docker Hub входа для получения образов
        - name: Log in to Docker Hub
          uses: docker/login-action@v2
          with:
            username: ${{ secrets.DOCKER_USERNAME }}
            password: ${{ secrets.DOCKER_PASSWORD }}
      
        # Trivy
        - name: Run Trivy vulnerability scanner
          uses: aquasecurity/trivy-action@master
          env:
            DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
            NEW_VERSION: ${{ env.NEW_VERSION }}
          with:
            image-ref: 'serpentariya/booking_app:${{ needs.deploy.outputs.version }}'
            format: 'table'
            exit-code: '0'  # Чтобы деплой продолжался при нахождении уязвимостей
            severity: 'CRITICAL,HIGH,MEDIUM'  # Уровень серьезности интересующих уязвимостей
            timeout: '5m'

          # ZAP 
        - name: ZAP Scan with Official Stable Image
          run: |
           # Pull the official stable ZAP image
            docker pull zaproxy/zap-stable
            docker run --rm \
              zaproxy/zap-stable zap-baseline.py \
              -t https://bbooking.pp.ua/ \
              -I \
              -j \
              --auto
            
        - name: Copy /netdata files
          uses: appleboy/scp-action@master
          with:
            host: ${{ secrets.AWS_SERVER_IP }}
            username: ${{ secrets.SERVER_USER }}
            key: ${{ secrets.AWS_SSH_KEY }}
            source: "netdata/*"
            target: "~/project/netdata/"
            strip_components: 1
  
        - name: Setup Netdata
          uses: appleboy/ssh-action@v0.1.5
          with:
            host: ${{ secrets.AWS_SERVER_IP }}
            username: ${{ secrets.SERVER_USER }}
            key: ${{ secrets.AWS_SSH_KEY }}
            script: |
              cd ~/project
              chmod +x netdata/setup_netdata.sh
              ./netdata/setup_netdata.sh
