name: Deploy Docker Compose to AWS

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'version.txt'  # Игнорировать изменения в version.txt
      - 'project.log'  # Игнорировать изменения в project.log
     
jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        token: ${{ secrets.PAT }}
        fetch-depth: 0

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Generate new Docker tag
      run: |
        CURRENT_VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "v1.0.0")
        MAJOR=$(echo $CURRENT_VERSION | sed 's/v\([0-9]*\)\.\([0-9]*\)\.\([0-9]*\)/\1/')
        MINOR=$(echo $CURRENT_VERSION | sed 's/v\([0-9]*\)\.\([0-9]*\)\.\([0-9]*\)/\2/')
        PATCH=$(echo $CURRENT_VERSION | sed 's/v\([0-9]*\)\.\([0-9]*\)\.\([0-9]*\)/\3/')
        NEW_PATCH=$((PATCH + 1))
        NEW_VERSION="v${MAJOR}.${MINOR}.${NEW_PATCH}"
        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

    - name: Update version files
      run: |
        echo "${{ env.NEW_VERSION }}" > version.txt
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        git add version.txt
        git commit -m "Update version to ${{ env.NEW_VERSION }}" || echo "No changes to commit"
        git tag ${{ env.NEW_VERSION }}
        git push https://${{ secrets.PAT }}@github.com/rumiantsevaa/Diploma-Project-Booking-Service.git HEAD:main
        git push https://${{ secrets.PAT }}@github.com/rumiantsevaa/Diploma-Project-Booking-Service.git ${{ env.NEW_VERSION }}


    - name: Build and Push Flask Image
      uses: docker/build-push-action@v4
      with:
        context: ./flask
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/booking_app:${{ env.NEW_VERSION }}

    - name: Build and Push Nginx Image  
      uses: docker/build-push-action@v4
      with:
        context: ./nginx
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/booking_nginx:${{ env.NEW_VERSION }}

    - name: Prepare directories
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.AWS_SERVER_IP }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.AWS_SSH_KEY }}
        script: |
          # Create directories with proper permissions
          mkdir -p ~/project/prometheus/rules
          mkdir -p ~/project/prometheus/reports
          chmod -R 755 ~/project/prometheus
          chown -R $USER:$USER ~/project/prometheus

    - name: Copy configuration files
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.AWS_SERVER_IP }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.AWS_SSH_KEY }}
        source: "compose.yaml,nginx/default.conf,prometheus/prometheus.yml,prometheus/generate_report.sh,prometheus/rules/recording_rules.yml,prometheus/Dockerfile"
        target: "~/project/"
        strip_components: 0

    - name: Set permissions
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.AWS_SERVER_IP }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.AWS_SSH_KEY }}
        script: |
          chmod -R 755 ~/project/prometheus
          chmod +x ~/project/prometheus/generate_report.sh

    - name: Check and install Docker & Docker Compose
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.AWS_SERVER_IP }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.AWS_SSH_KEY }}
        script: |
          # Check if Docker is installed
          if ! command -v docker &> /dev/null; then
            echo "Docker not found. Installing Docker..."
            sudo apt-get update
            sudo apt-get install -y docker.io
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo usermod -aG docker $USER
          else
            echo "Docker is already installed"
          fi

          # Check if Docker Compose is installed
          if ! command -v docker-compose &> /dev/null; then
            echo "Docker Compose not found. Installing Docker Compose..."
            sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
          else
            echo "Docker Compose is already installed"
          fi

    - name: Deploy to AWS
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.AWS_SERVER_IP }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.AWS_SSH_KEY }}
        script: |
          # Создаем минимальную структуру директорий
          mkdir -p ~/project/nginx
          mkdir -p ~/project/prometheus/rules
          chmod 755 ~/project/prometheus
          
          # Копируем конфигурационные файлы
          cp ~/project/prometheus/prometheus.yml ~/project/prometheus/
          cp ~/project/prometheus/generate_report.sh ~/project/prometheus/
          chmod +x ~/project/prometheus/generate_report.sh
          
          # Создаем .env файл с версией
          echo "TAG=${{ env.NEW_VERSION }}" > ~/project/.env
          
          # Переходим в директорию проекта
          cd ~/project
          
          # Останавливаем контейнеры и чистим неиспользуемые образы
          docker compose down --remove-orphans
          docker system prune -f
          
          # Подтягиваем новые образы из Docker Hub
          docker pull ${{ secrets.DOCKER_USERNAME }}/booking_nginx:${{ env.NEW_VERSION }}
          docker pull ${{ secrets.DOCKER_USERNAME }}/booking_app:${{ env.NEW_VERSION }}
          
          # Запускаем новые контейнеры
          docker compose up -d --force-recreate

    - name: SSL Certificate Management
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.AWS_SERVER_IP }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.AWS_SSH_KEY }}
        script: |
          # Проверяем наличие certbot
          if ! command -v certbot &> /dev/null; then
            sudo apt-get update
            sudo apt-get install -y certbot
          fi

          # Проверяем наличие crontab и устанавливаем при необходимости
          if ! command -v crontab &> /dev/null; then
            echo "Installing crontab..."
            sudo apt-get update
            sudo apt-get install -y cron
            sudo systemctl enable cron
            sudo systemctl start cron
          fi
          
          # Проверяем наличие задачи в crontab
          if ! sudo crontab -l 2>/dev/null | grep -q "certbot renew --quiet"; then
            echo "Adding certbot renewal task to crontab..."
            # Создаем новый crontab если он не существует или добавляем к существующему
            (sudo crontab -l 2>/dev/null || echo "") | grep -v "certbot renew --quiet" | { cat; echo "0 3 1 * * certbot renew --quiet"; } | sudo crontab -
            echo "Certbot renewal task added to crontab"
          else
            echo "Certbot renewal task already exists in crontab"
          fi
          
          # Получаем информацию о сертификатах
          CERT_INFO=$(sudo certbot certificates)
          
          # Проверяем наличие сертификата для обоих доменов
          if echo "$CERT_INFO" | grep -q "Domains: bbooking.pp.ua www.bbooking.pp.ua"; then
            echo "Certificate found for both domains. Attempting renewal if needed..."
            # Останавливаем контейнеры перед обновлением
            cd ~/project && docker compose down
            
            # Пробуем обновить сертификаты
            sudo certbot renew
            
            # Запускаем контейнеры
            cd ~/project && docker compose up -d
          else
            echo "No certificate found for both domains. Obtaining new certificate..."
            # Останавливаем контейнеры
            cd ~/project && docker compose down
            
            # Получаем новый сертификат
            sudo certbot certonly --standalone \
              -d bbooking.pp.ua -d www.bbooking.pp.ua \
              --non-interactive --agree-tos \
              -m ${{ secrets.EMAIL_FOR_CERTBOT }} \
              --force-renewal
            
            # Запускаем контейнеры
            cd ~/project && docker compose up -d
          fi

    - name: Setup Prometheus
      run: |
        # Check if Prometheus is installed
        if ! command -v prometheus &> /dev/null; then
          # Install Prometheus
          sudo apt-get update
          sudo apt-get install -y prometheus
          sudo apt-get install -y prometheus-node-exporter
        fi
        
        # Configure Prometheus
        sudo tee /etc/prometheus/prometheus.yml << EOF
        global:
          scrape_interval: 1h
          evaluation_interval: 1h
          
        scrape_configs:
          - job_name: 'node'
            static_configs:
              - targets: ['localhost:9100']
        EOF
        
        # Configure data retention
        sudo sed -i 's/--storage.tsdb.retention.time=.*$/--storage.tsdb.retention.time=24h/' /etc/default/prometheus
        
        # Restrict external access
        sudo sed -i 's/--web.listen-address=.*$/--web.listen-address=localhost:9090/' /etc/default/prometheus
        
        # Setup cron job for metrics collection
        CRON_CMD="0 * * * * /usr/bin/curl -s http://localhost:9090/api/v1/query?query=node_cpu_seconds_total > /var/log/prometheus/cpu_metrics.log && /usr/bin/curl -s http://localhost:9090/api/v1/query?query=node_filesystem_avail_bytes > /var/log/prometheus/disk_metrics.log"
        
        # Create metrics directory if it doesn't exist
        sudo mkdir -p /var/log/prometheus
        sudo chown prometheus:prometheus /var/log/prometheus
        
        # Add cron job if it doesn't exist
        if ! sudo crontab -l | grep -q "prometheus"; then
          (sudo crontab -l 2>/dev/null; echo "$CRON_CMD") | sudo crontab -
        fi
        
        # Restart Prometheus service
        sudo systemctl restart prometheus
        sudo systemctl restart prometheus-node-exporter
          
  security-checks:
      needs: deploy  # Чтобы проверки производились исключительно по успешной отработке deploy.yml
      runs-on: ubuntu-latest
      steps:
        - name: Checkout code
          uses: actions/checkout@v3
          
        - name: Get version
          id: get_version
          run: echo "VERSION=$(cat version.txt)" >> $GITHUB_ENV

          # Добавление Docker Hub входа для получения образов
        - name: Log in to Docker Hub
          uses: docker/login-action@v2
          with:
            username: ${{ secrets.DOCKER_USERNAME }}
            password: ${{ secrets.DOCKER_PASSWORD }}
      
        # Базовый скан Trivy с выводом в консоль
        - name: Run Trivy vulnerability scanner
          uses: aquasecurity/trivy-action@master
          env:
            DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
            NEW_VERSION: ${{ env.NEW_VERSION }}
          with:
            image-ref: 'serpentariya/booking_app:${{ env.VERSION }}'
            format: 'table'
            exit-code: '0'  # Чтобы деплой продолжался при нахождении уязвимостей
            severity: 'CRITICAL,HIGH,MEDIUM'  # Уровень серьезности интересующих уязвимостей
            timeout: '5m'

          # Replace the existing ZAP Scan with this updated version
        - name: ZAP Scan with Official Stable Image
          run: |
           # Pull the official stable ZAP image
           docker pull zaproxy/zap-stable
          
           # Run ZAP scan in a temporary container that will be removed after completion
           docker run --rm \
            zaproxy/zap-stable zap-baseline.py \
            -t https://bbooking.pp.ua/ \
            -I \
            -j \
            --auto
