name: Intrusion Prevention System Workflow

on:
  workflow_dispatch:
    inputs:
      reason:
        description: 'Test running workflow'
        required: false
        default: 'Manual trigger'
  
  push:
    paths:
      - '.github/workflows/IPS.yml'

jobs:
  security-monitoring:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
          
      - name: SSH and Fail2Ban Status Check
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.AWS_SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.AWS_SSH_KEY }}
          script: |
            echo "Welcome to your Intrusion Prevention System, majesty. This script collects your current configuration and works as a monitoring tool (IDS)."
            
            # SSH Module
            echo "**************************************************************************************************"
            echo "Security settings /etc/ssh/sshd_config"
            grep -E 'PermitRootLogin no|LoginGraceTime 60|ClientAliveInterval 15|ClientAliveCountMax 2' /etc/ssh/sshd_config
            
            # Fail2Ban Status
            echo "**************************************************************************************************"
            echo "Fail2Ban status:"
            systemctl status fail2ban | grep -E 'Active|Loaded|Main PID'
            
            # Custom fail2ban policy
            echo "**************************************************************************************************"
            echo "Current custom fail2ban sshd-custom policy:"
            cat /etc/fail2ban/filter.d/sshd-custom.conf
            
            # Banned IPs
            echo "**************************************************************************************************"
            echo "Banned IPs in fail2ban (only today):"
            grep "$(date '+%Y-%m-%d')" /var/log/fail2ban.log | grep 'Ban'
            
            # SSH logs
            echo "**************************************************************************************************"
            echo "SSH logs (only today):"
            grep "$(date '+%Y-%m-%d')" /var/log/auth.log | grep -E "$(date '+%Y-%m-%d')T"
            
            # Fail2ban recent actions
            echo "**************************************************************************************************"
            echo "Actions from fail2ban.log (last 10 lines):"
            tail -n 10 /var/log/fail2ban.log

      - name: Check Cloudflare Security Level
        run: |
          RESPONSE=$(curl -s -X GET "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/settings/security_level" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_KEY }}" \
            -H "Content-Type: application/json")
          
          SECURITY_LEVEL=$(echo $RESPONSE | jq -r '.result.value')
          MODIFIED_DATE=$(echo $RESPONSE | jq -r '.result.modified_on')
          
          echo "Security Level: $SECURITY_LEVEL"
          echo "Modified: $MODIFIED_DATE"

      - name: Get Filtered Nginx Logs
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.AWS_SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.AWS_SSH_KEY }}
          script: |
            # Получаем текущий IP GitHub Actions runner
            CURRENT_IP=$(curl -s https://api.ipify.org)
            echo "Current runner IP: $CURRENT_IP"
            
            # Получаем список IP из Cloudflare
            WHITELIST=$(curl -s -X GET "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/firewall/access_rules/rules" \
              -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_KEY }}" \
              -H "Content-Type: application/json" | \
              jq -r '.result[] | select(.mode=="whitelist") | .configuration.value' | \
              sort -u | \
              tr '\n' '|' | \
              sed 's/|$//')
            
            # Создаем временный файл для логов
            TEMP_LOG_FILE=$(mktemp)
            
            # Получаем все логи из контейнера и сохраняем во временный файл
            docker logs project-nginx-proxy-1 > "$TEMP_LOG_FILE" 2>&1
            
            echo -e "\nFull Nginx Logs before filtering:"
            cat "$TEMP_LOG_FILE"
            
            # Проверяем наличие логов
            if [ ! -s "$TEMP_LOG_FILE" ]; then
              echo "No Nginx logs found"
              rm -f "$TEMP_LOG_FILE"
              exit 0
            fi
            
            # Формируем список IP для исключения
            EXCLUDE_IPS=("127.0.0.1" "$CURRENT_IP")
            if [ ! -z "$WHITELIST" ]; then
              IFS='|' read -ra WHITELIST_IPS <<< "$WHITELIST"
              EXCLUDE_IPS+=("${WHITELIST_IPS[@]}")
            fi
            
            echo -e "\nExcluding IPs:"
            printf '%s\n' "${EXCLUDE_IPS[@]}"
            
            echo -e "\nFiltered Nginx Logs:"
            FILTERED_LOG_FILE=$(mktemp)
            
            # Фильтруем логи nginx
            while IFS= read -r line; do
              SKIP=0
              for ip in "${EXCLUDE_IPS[@]}"; do
                if [[ $line == *"$ip"* ]]; then
                  SKIP=1
                  break
                fi
              done
              if [ $SKIP -eq 0 ]; then
                echo "$line" >> "$FILTERED_LOG_FILE"
              fi
            done < "$TEMP_LOG_FILE"
            
            # Проверяем, есть ли отфильтрованные логи
            if [ ! -s "$FILTERED_LOG_FILE" ]; then
              echo "All logs were filtered out"
            else
              cat "$FILTERED_LOG_FILE"
            fi
            
            # Очищаем временные файлы
            rm -f "$TEMP_LOG_FILE" "$FILTERED_LOG_FILE"
