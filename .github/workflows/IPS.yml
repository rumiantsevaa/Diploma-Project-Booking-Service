name: Intrusion Prevention System Workflow

on:
  workflow_dispatch:
    inputs:
      reason:
        description: 'Test running workflow'
        required: false
        default: 'Manual trigger'
  
  push:
    paths-ignore:
      - 'version.txt'
      - 'project.log'
      - 'netdata/dashboards/**'
      - 'last_successful_version.txt'
      - '.github/workflows/deploy.yml'
    paths:
      - '.github/workflows/IPS.yml'

jobs:
  security-monitoring:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
          
      - name: SSH and Fail2Ban Status Check
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.AWS_SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.AWS_SSH_KEY }}
          script: |
            echo "Welcome to your Intrusion Prevention System, majesty. This script collects your current configuration and works as a monitoring tool (IDS)."
            
            # SSH Module
            echo "**************************************************************************************************"
            echo "Security settings /etc/ssh/sshd_config"
            grep -E 'PermitRootLogin no|LoginGraceTime 60|ClientAliveInterval 15|ClientAliveCountMax 2' /etc/ssh/sshd_config
            
            # Fail2Ban Status
            echo "**************************************************************************************************"
            echo "Fail2Ban status:"
            systemctl status fail2ban | grep -E 'Active|Loaded|Main PID'
            
            # Custom fail2ban policy
            echo "**************************************************************************************************"
            echo "Current custom fail2ban sshd-custom policy:"
            cat /etc/fail2ban/filter.d/sshd-custom.conf
            
            # Banned IPs
            echo "**************************************************************************************************"
            echo "Banned IPs in fail2ban (only today):"
            grep "$(date '+%Y-%m-%d')" /var/log/fail2ban.log | grep 'Ban'
            
            # SSH logs
            echo "**************************************************************************************************"
            echo "SSH logs (only today):"
            grep "$(date '+%Y-%m-%d')" /var/log/auth.log | grep -E "$(date '+%Y-%m-%d')T"
            
            # Fail2ban recent actions
            echo "**************************************************************************************************"
            echo "Actions from fail2ban.log (last 10 lines):"
            tail -n 10 /var/log/fail2ban.log

      - name: Check Cloudflare Security Level
        run: |
          RESPONSE=$(curl -s -X GET "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/settings/security_level" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_KEY }}" \
            -H "Content-Type: application/json")
          
          SECURITY_LEVEL=$(echo $RESPONSE | jq -r '.result.value')
          MODIFIED_DATE=$(echo $RESPONSE | jq -r '.result.modified_on')
          
          echo "Security Level: $SECURITY_LEVEL"
          echo "Modified: $MODIFIED_DATE"

      - name: Get Filtered Nginx Logs
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.AWS_SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.AWS_SSH_KEY }}
          script: |
            # Получаем текущий IP GitHub Actions runner
            CURRENT_IP=$(curl -s https://api.ipify.org)
            echo "Current runner IP: $CURRENT_IP"
            
            # Получаем список IP из Cloudflare
            WHITELIST=$(curl -s -X GET "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/firewall/access_rules/rules" \
              -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_KEY }}" \
              -H "Content-Type: application/json" | \
              jq -r '.result[] | select(.mode=="whitelist") | .configuration.value' | \
              sort -u | \
              tr '\n' '|' | \
              sed 's/|$//')
            
            # Создаем временный файл для логов
            TEMP_LOG_FILE=$(mktemp)
            
            # Получаем все логи из контейнера
            docker logs project-nginx-proxy-1 > "$TEMP_LOG_FILE" 2>&1
            
            # Формируем список IP для исключения
            EXCLUDE_IPS=("127.0.0.1" "$CURRENT_IP")
            if [ ! -z "$WHITELIST" ]; then
              IFS='|' read -ra WHITELIST_IPS <<< "$WHITELIST"
              EXCLUDE_IPS+=("${WHITELIST_IPS[@]}")
            fi
            
            echo "Excluding IPs:"
            printf '%s\n' "${EXCLUDE_IPS[@]}"
            
            echo "Filtered Nginx Logs:"
            
            # Добавим отладочную информацию
            echo "Debug: Total lines in log before filtering: $(wc -l < "$TEMP_LOG_FILE")"
            
            # Фильтруем логи nginx с более точной проверкой
            while IFS= read -r line; do
              if [[ -n "$line" ]]; then  # Проверяем, что строка не пустая
                SKIP=0
                for ip in "${EXCLUDE_IPS[@]}"; do
                  # Извлекаем IP адрес из строки лога
                  LOG_IP=$(echo "$line" | grep -oE '[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+' | head -1)
                  if [[ "$LOG_IP" == "$ip" ]]; then
                    SKIP=1
                    break
                  fi
                done
                if [ $SKIP -eq 0 ]; then
                  echo "$line"
                fi
              fi
            done < "$TEMP_LOG_FILE"
            
            # Очищаем временный файл
            rm -f "$TEMP_LOG_FILE"
